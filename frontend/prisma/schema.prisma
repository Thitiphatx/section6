generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  password   String
  role       UserRole   @default(USER)
  created_at DateTime   @default(now()) @db.Date
  status     UserStatus @default(ACTIVE)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Resources {
  id         String         @id @default(uuid())
  name       String
  created_at DateTime       @default(now()) @db.Date
  Images     Images[]
  status     ResourceStatus @default(PENDING)
}

model Images {
  id              String          @id @default(uuid())
  resource_id     String
  resource        Resources       @relation(fields: [resource_id], references: [id])
  latitude        Float
  longitude       Float
  timestamp       DateTime
  file_path       String?
  file_name       String
  processed_path  String?
  detected_object Json?
  ClusterImages   ClusterImages[]
  status          ImageStatus     @default(PENDING)

  @@unique([resource_id, file_name]) // Composite unique constraint
}

model Clusters {
  id              String            @id @default(uuid())
  name            String
  address         String
  road            String
  created_at      DateTime          @default(now()) @db.Date
  ClusterVersions ClusterVersions[]
}

model ClusterVersions {
  id            String               @id @default(uuid())
  price         Float
  version       Int
  created_at    DateTime             @default(now()) @db.Date
  status        ClusterVersionStatus @default(DEACTIVE)
  cluster_id    String
  cluster       Clusters             @relation(fields: [cluster_id], references: [id], onDelete: Cascade)
  ClusterImages ClusterImages[]
}

model ClusterImages {
  id                 String          @id @default(uuid())
  cluster_version_id String
  image_id           String
  cluster            ClusterVersions @relation(fields: [cluster_version_id], references: [id], onDelete: Cascade)
  image              Images          @relation(fields: [image_id], references: [id], onDelete: Cascade)

  @@unique([cluster_version_id, image_id]) // Prevent duplicate image assignments
}

enum UserStatus {
  ACTIVE // Normal
  DEACTIVE // Banned
}

enum UserRole {
  ADMIN
  USER
}

enum ImageStatus {
  PENDING // No file yet
  AVAILABLE // File is available
  PROCESSING // Undergoing segmentation
  FAILED // Processing failed
}

enum ResourceStatus {
  DONE // Clustered resource
  READY // All images has uploaded
  PENDING // Image not upload yet
}

enum ClusterVersionStatus {
  ACTIVE // listed on selling
  DEACTIVE // unlisted
}
